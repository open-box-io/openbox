service: open-box
useDotenv: true

provider:
    name: aws
    runtime: nodejs12.x
    memorySize: 128
    timeout: 10
    stage: production
    region: eu-central-1
    websocketsApiName: open-box-websocket
    websocketsApiRouteSelectionExpression: $request.body.action

    iamRoleStatements:
        - Effect: Allow
          Action:
              - 'execute-api:ManageConnections'
              - 'execute-api:Invoke'
          Resource:
              - 'arn:aws:execute-api:*:*:**/@connections/*'

resources:
    Resources:
        ApiGatewayAuthorizer:
            Type: AWS::ApiGateway::Authorizer
            Properties:
                Name: CognitoUserPool
                Type: COGNITO_USER_POOLS
                IdentitySource: method.request.header.Authorization
                RestApiId:
                    Ref: ApiGatewayRestApi
                ProviderARNs:
                    - arn:aws:cognito-idp:eu-central-1:462429920269:userpool/eu-central-1_aTUl5v60U

functions:
    api:
        handler: lambda.api
        events:
            - http: OPTIONS /gamemode
            - http:
                  method: POST
                  path: /gamemode
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer
            - http:
                  method: DELETE
                  path: /gamemode
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer

            - http: OPTIONS /lobby/players
            - http: DELETE /lobby/players
            - http: GET /lobby/players
            - http: PUT /lobby/players

            - http: OPTIONS /lobby
            - http: DELETE /lobby
            - http: GET /lobby
            - http:
                  method: POST
                  path: /lobby
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer

    connectionHandler:
        handler: lambda.websocketConnection
        events:
            - websocket:
                  route: $connect
            - websocket:
                  route: $disconnect

    actionHandler:
        handler: lambda.websocketAction
        events:
            - websocket:
                  route: $default
